# Let's get started with Typescript

## What is typescript?

Its a superset of javascript
A language building up on javascript
It adds new features and advantages to javascript.

Drawback
Browsers can't excute typescript.

Therefore typescript is compiled to javascript and then we can use it.
It adds types to javascript which is one of the major feature of typescript.
This gives us an opportunity to find errors in our code before time at runtime.

## Type Script Overview

1. Typescipt also understands features like interface and generics.
2. Meta Programming features like Decorators
3. Rich Configurable Options
4. Types
5. Next gen JavaScript features
6. Modern Tooling helps even in Non-TypeScripts Projects

## Core Types

- number
- string
- boolean

Typescript only helps you during developement before it is compiled.
We can use typeof operator to infer the type of any variable.
Javascript use 'dynamic type'(resolved at runtimes). While Typescript uses 'static types'(set during developement.)
The core primitive types in TypeScript are all lowercase!

## Type Assignments and Type Inference

Type Inference (Matlab khud se type ka pata chal raha usko)
Type Assignments ( matalab number1 = 5 assignments par usko type ka pata chal gaya)
Example:
let number1: number,
number1 = 5

Is case mein karna padega.

## Object Type

## Array Type

## Working with Tuples

When I only want any specific number of elements in an array
For example:
Jese role: [2, 'author']
Ab mujhe bas ye dono he chahiye but typesciprt will infer this as special union type.
where I can put number and string in this array to avoid this behaviour we use this
concept.
role: [number, string] and this will mark as a tuple for our object.

## Working with Enums

enums only exit in typescript not in javascript

enum Role{
Admin,Read_Only, Edit
};

## Any Type

This is special type but should be avoided and is very flexible
It takes all advantages of Typescript

## Union Types

If we have multiple types to work with, we can use union types.

## Literal Types

When we are very clear about the value it should hold.
For Example:
const val = 2.8;

Typescript will infer it as literal types.
Literal types are mostly used in conjuction with Union Types.
For Example:
const role = 'admin' | 'user';

## Type Alias or Custom Types

We can use Type to define a custom type.

## Function Return Types and Void

Return type can be infered by typescript.

For example:
function add(n1: number, n2: number){
return n1+n2;
}
Typescript will automatically be able to infer that this will return a number type.

But we can also explicitly assing a function to return a number type.

function add(n1: number, n2: number): number{
return n1+n2;
}

It is considered to be a good practice to do typescript its type inference.

Javascipt doesn't have void type, but typescipt have type 'void'.
'undefined' is also a type in typescript.
But functions are not allowed to return a undefined in typescript.

## Functions as types

let combineValues = (a: number, b: number) => number;

Here in this syntax we are saying that combineValues is a function that will accept two arguments as a number type and then will return a number type. This is know as Function types. And they allow us to describe us which types of function we want to specifically use.

## Function Types and Callbacks

let combineVal = (n1: number, n2: number, callBack = (a: number) => void){
let result = n1+n2;
callBack(result);
}

let x = combineVal(5, 12, (result)=>{
console.log(result);
// return result;
})

Here I have defined a callBack function that will only take a number as an argument and will have a 'void' return type.
In Comment I have returned the result but the typescript will not complain about this and will return something, by specifing void we specify that we will ignore anything that is returned by this function.
Therefore parameters are enforced and it doesn't care about the return type.

As you learned, callback functions can return something, even if the argument on which they're passed does NOT expect a returned value.

## The Unknown Type

let userInput: unknown;

This type is used when we are not very certain about which type of datatype this is going to be, thatis the type is of unknown nature( for example: it can be a string, it can be a number).
We can store anyvalue in the unknown type and typescript won't complain.

So whats the difference with 'any' type?
'unknown' is a bit more restrictive and while 'any' type is very flexible and can be used anywhere.

For Example:
let userInput: unknown;
let userName = 'Sunny';

userInput = 5;
userInput = 'Max';
userInput = userName; // This line will give error as unknown type cannot be assigned to string type.

But if we were using any as a type this line won't give any error.
We will need an extra type check if we want to assing it.

if(typeof userName === 'string'){
userInput = userName; // Because we are type checking before assing it, typescript won't complain.
}

You shouldn't use unknown all the time but it is better than type 'any'.

## The 'never' Type

Now consider an example where a function will break or not return anything. There we use type as never.

For example:
function generateError(message: string, code: number): never{
throw {message: message, errorCode: code};
}

generateError('Unrestricted Area', 500);

This will eventually break my script and will stop the further exceution. Therefore the return type is not 'void' but it is 'never'.

A function with infinite loop is also an example.

---

## The Type Script Compiler

### Watch Mode

To Tell typescript whenever a file is changed we have to recompile.
We can target individual file to watch mode.
But in Bigger files thats not the case.

### Compiling the entire project

To initialize a project as a type script project, we just
need to run.
tsc --init

We tell typescipt that everything that is typescript in this folder will be compiled as a js file.

It will create a tsconfig.json file.

Combining this with tsc -w
Will then work with watch mode to see any changes we make to typescript file.

### Including and Excluding files

tsconfig.json is an essential file for typescript
we can use 'exclude' property to exclude files and generally we exclude node_modules. // Would be default
we can use 'include' property to include files and if we set include key then we have to specifically tell typescript what and which files needs to be included.

### Setting up a compilation target

"target": "es5"
Here we say typescript to compile my javascript to version where browsers supports es5.

### Understanding Typescript Core Libs

How do typescript know that button exit or document exist. It is because we have some lib values that are already set by default.

If we include lib we have to explicitly mention which apis are available.

### More Configuration and Compilation options

### Working with Source Map

source map helps us with debugging and developement
we will have additional map files generated which will act as a bridge between our typescript file and javascript file.

We can then debug our ts file in developer tools.

## rootDir and outDir

outDir can be used to point where my javascript that are complied needs to be added.

---

## Module 14

### React & Typescript

tsx files are files where you can write your HTML markup inside typescript or javascript.

Type React.FC
A functional component, a component will qualify as a functional component if the function that returns JSX.

### User inputs with refs

To caputre user inputs it is important to use some steps.
We can use 'useRef' hook to get a ref object that will be helpful for us to submit any user input to submit or handle.
So when we are working with forms and we require a connection between different form input element their we can use ref object.

### Working with states and types
